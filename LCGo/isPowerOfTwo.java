package LCGo;

public class isPowerOfTwo {
    /**
     * 超时
     */
    public boolean isPowerOfTwo(int n) {
        if (n == 1) {
            return true;
        }
        for (int i = 2; i <= n; i *= 2) {
            if (i == n) {
                return true;
            }
        }
        return false;
    }

    /**
     * 一个数 n 是 2 的幂，当且仅当 n 是正整数，并且 n 的二进制表示中仅包含 1 个 1。
     * 考虑使用位运算，将 n 的二进制表示中最低位的那个 1 提取出来，再判断剩余的数值是否为 0 即可。
     * n & (n - 1), 将 n 二进制表示的最低位 1 移除, 因此，如果 n 是正整数并且 n & (n - 1) = 0，那么 n 就是 2 的幂。
     * n & (-n), −n 的二进制表示为 n 的二进制表示的每一位取反再加上 1,因此，如果 n 是正整数并且 n & (-n) = n，那么 n 就是 2 的幂。
     *
     * 如果一个数是2的n次幂，那么，这个数换算成二进制，一定是最左边是1，其他位是0的形式
     * 比如4，它的二进制是100，8的二进制是1000
     * n-1的二进制，一定是n的每一位取反，也就是1变成0，0变成1
     * 比如7的二进制是0111，3的二进制是011
     */
}
